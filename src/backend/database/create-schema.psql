DROP TYPE IF EXISTS "role_type" CASCADE;
DROP TYPE IF EXISTS "gender_type" CASCADE;
DROP TYPE IF EXISTS "state_type" CASCADE;

DROP TABLE IF EXISTS "account" CASCADE;
DROP TABLE IF EXISTS "province" CASCADE;
DROP TABLE IF EXISTS "district" CASCADE;
DROP TABLE IF EXISTS "ward" CASCADE;
DROP TABLE IF EXISTS "shipping_address" CASCADE;
DROP TABLE IF EXISTS "category" CASCADE;
DROP TABLE IF EXISTS "payment" CASCADE;
DROP TABLE IF EXISTS "product" CASCADE;
DROP TABLE IF EXISTS "product_image" CASCADE;
DROP TABLE IF EXISTS "product_variant" CASCADE;
DROP TABLE IF EXISTS "order" CASCADE;
DROP TABLE IF EXISTS "order_state" CASCADE;
DROP TABLE IF EXISTS "order_variant" CASCADE;
DROP TABLE IF EXISTS "cart" CASCADE;
DROP TABLE IF EXISTS "cart_variant" CASCADE;
DROP TABLE IF EXISTS "review" CASCADE;
DROP TABLE IF EXISTS "voucher" CASCADE;
DROP TABLE IF EXISTS "voucher_user" CASCADE;
DROP TABLE IF EXISTS "frequent_product" CASCADE;

----------------------- CREATE TABLE -------------------------

CREATE TYPE role_type AS ENUM('user','admin');
CREATE TYPE gender_type AS ENUM('male','female');
CREATE TYPE state_type AS ENUM('init', 'pending','shipping','cancel','success', 'refunding', 'refunded');

CREATE TABLE "account" (
  "email" varchar PRIMARY KEY,
  "password" varchar,
  "phone" varchar UNIQUE,
  "fullname" varchar,
  "birthday" date DEFAULT CURRENT_TIMESTAMP,
  "gender" gender_type DEFAULT 'male',
  "avatar_path" varchar,
  "avatar_filename" varchar,
  "role" role_type,
  "verified" bool DEFAULT false,
  "token" char(64)
);

CREATE TABLE "province" (
  "id" int PRIMARY KEY,
  "province_name" varchar NOT NULL
);

CREATE TABLE "district" (
  "id" int PRIMARY KEY,
  "district_name" varchar NOT NULL,
  "province_id" int NOT NULL
);

CREATE TABLE "ward" (
  "id" int PRIMARY KEY,
  "ward_name" varchar NOT NULL,
  "district_id" int NOT NULL
);

CREATE TABLE "shipping_address" (
  "id" SERIAL PRIMARY KEY,
  "email" varchar NOT NULL,
  "province_id" int NOT NULL,
  "district_id" int NOT NULL,
  "ward_id" int NOT NULL,
  "address" varchar NOT NULL,
  "lat" real NOT NULL,
  "long" real NOT NULL
);

CREATE TABLE "category" (
  "id" SERIAL PRIMARY KEY,
  "parent_id" int,
  "category_name" varchar,
  "description" varchar
);

CREATE TABLE "payment" (
  "id" SERIAL PRIMARY KEY,
  "provider" varchar
);

CREATE TABLE "product" (
  "id" SERIAL PRIMARY KEY,
  "product_name" varchar NOT NULL,
  "category_id" int,
  "description" varchar,
  "avg_rating" real DEFAULT 0 CHECK(avg_rating>=0) CHECK(avg_rating<=5),
  "count_rating" int NOT NULL DEFAULT 0 CHECK(count_rating>=0),
  "min_price" bigint DEFAULT 0,
  "max_price" bigint DEFAULT 0,
  "stock" int DEFAULT 0,
  "created_time" timestamp DEFAULT CURRENT_TIMESTAMP,
  "soft_delete" boolean NOT NULL DEFAULT false,
  "product_fts" tsvector
);

CREATE TABLE "product_image" (
  "id" SERIAL PRIMARY KEY,
  "product_id" int,
  "path" varchar NOT NULL,
  "filename" varchar
);

CREATE TABLE "product_variant" (
  "id" SERIAL PRIMARY KEY,
  "product_id" int,
  "variant_name" varchar,
  "price" bigint NOT NULL,
  "discount_price" bigint,
  "stock" int NOT NULL
);

CREATE TABLE "cart" (
  "id" SERIAL PRIMARY KEY,
  "email" varchar,
  "total" int NOT NULL DEFAULT 0 CHECK("total">=0),
  "count" int NOT NULL DEFAULT 0 CHECK("count">=0)
);

CREATE TABLE "cart_variant" (
  "cart_id" int,
  "variant_id" int,
  "quantity" int NOT NULL DEFAULT 1 CHECK("quantity">=1),
  PRIMARY KEY ("cart_id", "variant_id")
);

CREATE TABLE "review" (
  "variant_id" int,
  "order_id" varchar,
  "rating" int NOT NULL CHECK("rating">=1),
  "comment" varchar,
  "created_time" timestamp DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY ("variant_id", "order_id")
);

CREATE TABLE "order" (
  "id" varchar PRIMARY KEY,
  "email" varchar,
  "receiver_name" varchar,
  "receiver_phone" varchar,
  "created_time" timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  "payment_id" int NOT NULL,
  "shipping_address_id" int NOT NULL,
  "total_price" bigint NOT NULL DEFAULT 0,
  "discount_price" bigint NOT NULL DEFAULT 0,
  "shipping_price" bigint NOT NULL DEFAULT 0,
  "final_price" bigint NOT NULL DEFAULT 0
);

CREATE TABLE "order_variant" (
  "order_id" varchar,
  "reviewed" bool NOT NULL DEFAULT false,
  "variant_id" int,
  "quantity" int NOT NULL,
  "variant_price" bigint NOT NULL DEFAULT 0,
  PRIMARY KEY ("order_id", "variant_id")
);

CREATE TABLE "order_state" (
  "order_id" varchar,
  "state" state_type NOT NULL,
  "created_time" timestamp NOT NULL DEFAULT clock_timestamp(),
  PRIMARY KEY ("order_id", "state", "created_time")
);

CREATE TABLE "voucher" (
  "voucher_code" varchar PRIMARY KEY,
  "percentage_discount" real NOT NULL,
  "minimum_price" bigint NOT NULL,
  "maximum_discount_price" bigint NOT NULL,
  "start_date" date NOT NULL DEFAULT CURRENT_TIMESTAMP,
  "maximum_usage" int NOT NULL DEFAULT 1,
  "current_usage" int NOT NULL DEFAULT 0,
  "end_date" date NOT NULL
);

CREATE TABLE "voucher_user" (
  "voucher_code" varchar,
  "email" varchar,
  PRIMARY KEY("voucher_code", "email")
);

CREATE TABLE "frequent_product" (
  "support" float,
  "confident" float,
  "consequence_id" int,
  "product_id" int,
  PRIMARY KEY ("product_id", "consequence_id")
);

----------------------- CONSTRAINT -------------------------

ALTER TABLE "district" ADD FOREIGN KEY ("province_id") REFERENCES "province"("id");
ALTER TABLE "ward" ADD FOREIGN KEY ("district_id") REFERENCES "district"("id");

ALTER TABLE "shipping_address" ADD FOREIGN KEY("province_id") REFERENCES "province"("id");
ALTER TABLE "shipping_address" ADD FOREIGN KEY("district_id") REFERENCES "district"("id");
ALTER TABLE "shipping_address" ADD FOREIGN KEY("ward_id") REFERENCES "ward"("id");
ALTER TABLE "shipping_address" ADD FOREIGN KEY ("email") REFERENCES "account" ("email");

ALTER TABLE "order" ADD FOREIGN KEY ("payment_id") REFERENCES "payment" ("id");
ALTER TABLE "order" ADD FOREIGN KEY ("shipping_address_id") REFERENCES "shipping_address" ("id");
ALTER TABLE "order" ADD FOREIGN KEY ("email") REFERENCES "account" ("email");
ALTER TABLE "order_variant" ADD FOREIGN KEY ("variant_id") REFERENCES "product_variant" ("id");
ALTER TABLE "order_variant" ADD FOREIGN KEY ("order_id") REFERENCES "order" ("id");
ALTER TABLE "order_state" ADD FOREIGN KEY ("order_id") REFERENCES "order" ("id");

ALTER TABLE "category" ADD FOREIGN KEY ("parent_id") REFERENCES "category" ("id");

ALTER TABLE "product" ADD FOREIGN KEY ("category_id") REFERENCES "category" ("id");
ALTER TABLE "product_image" ADD FOREIGN KEY ("product_id") REFERENCES "product" ("id");
ALTER TABLE "product_variant" ADD FOREIGN KEY ("product_id") REFERENCES "product" ("id");

ALTER TABLE "review" ADD FOREIGN KEY ("order_id","variant_id") REFERENCES "order_variant" ("order_id", "variant_id");

ALTER TABLE "cart_variant" ADD FOREIGN KEY ("variant_id") REFERENCES "product_variant" ("id");

ALTER TABLE "voucher_user" ADD FOREIGN KEY ("voucher_code") REFERENCES "voucher" ("voucher_code") ON DELETE CASCADE;
ALTER TABLE "voucher_user" ADD FOREIGN KEY ("email") REFERENCES "account" ("email") ON DELETE CASCADE;

ALTER TABLE "cart" ADD FOREIGN KEY ("email") REFERENCES "account" ("email");
ALTER TABLE "cart_variant" ADD FOREIGN KEY ("cart_id") REFERENCES "cart" ("id");

ALTER TABLE "frequent_product" ADD FOREIGN KEY("product_id") REFERENCES "product"("id");
ALTER TABLE "frequent_product" ADD FOREIGN KEY("consequence_id") REFERENCES "product"("id");

----------------------- FULL TEXT SEARCH -------------------------
CREATE INDEX idx_product_fts
ON product 
USING GIN(product_fts);

------------------------- FUNCTION ---------------------------

--- Aggregate multiple rows of text search vector
CREATE OR REPLACE AGGREGATE tsvector_agg(tsvector) (
   STYPE = pg_catalog.tsvector,
   SFUNC = pg_catalog.tsvector_concat,
   INITCOND = ''
);

--- Remove accent of Vietnamese
CREATE OR REPLACE FUNCTION vn_unaccent(text) RETURNS text AS
$$
BEGIN
	RETURN lower(
		translate(
			$1,
			'¹²³ÀÁẢẠÂẤẦẨẬẪÃÄÅÆàáảạâấầẩẫậãäåæĀāĂẮẰẲẴẶăắằẳẵặĄąÇçĆćĈĉĊċČčĎďĐđÈÉẸÊẾỀỄỆËèéẹêềếễệëĒēĔĕĖėĘęĚěĜĝĞğĠġĢģĤĥĦħĨÌÍỈỊÎÏìíỉịîïĩĪīĬĭĮįİıĲĳĴĵĶķĸĹĺĻļĽľĿŀŁłÑñŃńŅņŇňŉŊŋÒÓỎỌÔỐỒỔỖỘỐỒỔỖỘƠỚỜỞỠỢÕÖòóỏọôốồổỗộơớờỡợởõöŌōŎŏŐőŒœØøŔŕŖŗŘřßŚśŜŝŞşŠšŢţŤťŦŧÙÚỦỤƯỪỨỬỮỰÛÜùúủụûưứừửữựüŨũŪūŬŭŮůŰűŲųŴŵÝýÿỳŶŷŸŹźŻżŽžёЁ',
			'123AAAAAAAAAAAAAAaaaaaaaaaaaaaaAaAAAAAAaaaaaaAaCcCcCcCcCcDdDdEEEEEEEEEeeeeeeeeeEeEeEeEeEeGgGgGgGgHhHhIIIIIIIiiiiiiiIiIiIiIiIiJjKkkLlLlLlLlLlNnNnNnNnnNnOOOOOOOOOOOOOOOOOOOOOOOooooooooooooooooooOoOoOoEeOoRrRrRrSSsSsSsSsTtTtTtUUUUUUUUUUUUuuuuuuuuuuuuUuUuUuUuUuUuWwYyyyYyYZzZzZzeE'
		)
);
END
$$ 
LANGUAGE 'plpgsql' IMMUTABLE;

--- Update price and stock of a product after add variant
CREATE OR REPLACE FUNCTION update_min_max_price_stock_product() RETURNS trigger AS
$$
BEGIN
  -- Update prices
  UPDATE "product" AS p
  SET ("min_price", "max_price") = (
    SELECT min(least("price", "discount_price")), max(greatest("price", "discount_price"))
    FROM "product_variant" AS v
    WHERE v.product_id = COALESCE(NEW.product_id, OLD.product_id)
  )
  WHERE p.id = COALESCE(NEW.product_id, OLD.product_id);

  -- Update stock
  UPDATE "product" AS p
  SET ("stock") = (
    SELECT sum("stock")
    FROM "product_variant" AS v
    WHERE v.product_id = COALESCE(NEW.product_id, OLD.product_id)
  )
  WHERE p.id = COALESCE(NEW.product_id, OLD.product_id);

  RETURN NULL;
END;
$$
LANGUAGE 'plpgsql';

--- Update avg_rating and count_rating of a product after add review
CREATE OR REPLACE FUNCTION update_rating_product_order_review() RETURNS trigger AS
$$
BEGIN
  --- Update product rating
  UPDATE "product" AS p
  SET ("avg_rating", "count_rating") = (
    SELECT cast(sum(r.rating) AS DECIMAL) / count(*), count(*)
    FROM "review" AS r JOIN "product_variant" AS pv 
    ON r.variant_id = pv.id
    WHERE p.id = pv.product_id 
  )
  WHERE p.id = (
    SELECT pv.product_id FROM product_variant AS pv
    WHERE pv.id = COALESCE(NEW.variant_id, OLD.variant_id)
  );

  --- Update order review state
  UPDATE "order_variant" AS ov
  SET "reviewed" = true
  WHERE ov.order_id = NEW.order_id AND ov.variant_id = NEW.variant_id;

  RETURN NULL;
END;
$$
LANGUAGE 'plpgsql';

--- Create cart related to the account
CREATE OR REPLACE FUNCTION create_cart_for_account() RETURNS trigger AS
$$
BEGIN
  INSERT INTO "cart"("email") VALUES (NEW.email);
  RETURN NULL;
END;
$$
LANGUAGE 'plpgsql';

--- Update total price of cart
CREATE OR REPLACE FUNCTION update_total_count_cart() RETURNS trigger AS
$$
BEGIN
  UPDATE "cart" AS c
  SET (total, count) = (
    SELECT COALESCE(SUM(cv.quantity * LEAST(pv.price,pv.discount_price)),0), COALESCE(SUM(cv.quantity),0)
    FROM "cart_variant" AS cv
    JOIN "product_variant" AS pv
    ON cv.variant_id = pv.id
    WHERE cv.cart_id = COALESCE(OLD.cart_id,NEW.cart_id)
  ) 
  WHERE c.id = COALESCE(OLD.cart_id,NEW.cart_id);
  RETURN NULL;
END;
$$
LANGUAGE 'plpgsql';

--- Update the FTS data on product table on change of product data and variant data
CREATE OR REPLACE FUNCTION update_product_fts_column() RETURNS trigger AS
$$
  DECLARE update_product_id integer:=0;
BEGIN
  --- Get product ID need to update

  IF TG_TABLE_NAME = 'product' THEN
    update_product_id := COALESCE(NEW.id, OLD.id);
  ELSIF TG_TABLE_NAME = 'product_variant' THEN
    update_product_id := COALESCE(NEW.product_id, OLD.product_id);
  END IF;

  UPDATE "product"
  SET "product_fts" = (
    --- Aggregate all result
    SELECT tsvector_agg(subquery.searchable) FROM (
      --- The product with its category (1st level), and parent category (2nd level)
      SELECT 
        setweight(to_tsvector('simple',vn_unaccent(p.product_name)),'A') || 
        setweight(to_tsvector('simple',vn_unaccent(COALESCE(c1.category_name, ''))),'B') ||
        setweight(to_tsvector('simple',vn_unaccent(COALESCE(c2.category_name, ''))),'C') ||
        setweight(to_tsvector('simple',vn_unaccent(COALESCE(p.description, ''))),'D') AS searchable
      FROM product AS p
      JOIN category AS c1 ON p.category_id = c1.id
      LEFT JOIN category AS c2 ON c1.parent_id = c2.id
      WHERE p.id = update_product_id

      UNION ALL

      --- All of the product's variants
      SELECT 
        setweight(to_tsvector('simple',vn_unaccent(pv.variant_name)),'B') AS searchable
      FROM product_variant AS pv
      WHERE pv.product_id = update_product_id
    ) AS subquery
  )
  WHERE id = update_product_id;

  RETURN NULL;
END
$$
LANGUAGE 'plpgsql';

--- Update the price of order_variant to match the current variant price
CREATE OR REPLACE FUNCTION copy_price_order() RETURNS trigger AS
$$
BEGIN
  UPDATE "order_variant" AS ov
  SET ("variant_price") = (
    SELECT least("price", "discount_price")
    FROM "product_variant" AS pv
    WHERE pv.id = NEW.variant_id
  ) 
  WHERE ov.order_id = NEW.order_id AND ov.variant_id = NEW.variant_id;

  RETURN NULL;
END;
$$
LANGUAGE 'plpgsql';

--- Remove variant from cart and order when soft delete product
CREATE OR REPLACE FUNCTION remove_variant_from_cart() RETURNS trigger AS
$$
BEGIN

  IF NEW.soft_delete = false THEN 
  RETURN null;
  END IF;

  --- Remove variant from all carts
  DELETE FROM cart_variant
  WHERE variant_id IN (
    SELECT product_variant.id
    FROM product_variant
    WHERE product_variant.product_id = NEW.id
  );

  return NULL;
END;
$$
LANGUAGE 'plpgsql';


--- Update current usage of voucher
CREATE OR REPLACE FUNCTION update_current_usage_voucher() RETURNS trigger AS
$$
BEGIN
  UPDATE "voucher"
  SET (current_usage) = (
    SELECT COALESCE(COUNT(*),0)
    FROM "voucher_user"
    WHERE voucher_user.voucher_code = NEW.voucher_code
  )
  WHERE voucher.voucher_code = NEW.voucher_code;
  RETURN NULL;
END;
$$
LANGUAGE 'plpgsql';

-------------------------- TRIGGER ------------------------------

--- Update min, max, stock of product after change variant
CREATE TRIGGER insert_variant
AFTER INSERT OR UPDATE OR DELETE
ON "product_variant"
FOR EACH ROW
EXECUTE PROCEDURE update_min_max_price_stock_product();

--- Update rating count and avg when review changes
CREATE TRIGGER insert_review
AFTER INSERT OR UPDATE OR DELETE
ON "review"
FOR EACH ROW
EXECUTE PROCEDURE update_rating_product_order_review();

--- Create cart after insert new account
CREATE TRIGGER insert_account
AFTER INSERT 
ON "account"
FOR EACH ROW
EXECUTE PROCEDURE create_cart_for_account();

--- Update total price after change cart variants
CREATE TRIGGER update_cart
AFTER INSERT OR UPDATE OR DELETE
ON "cart_variant"
FOR EACH ROW 
EXECUTE PROCEDURE update_total_count_cart();

--- Update product FTS data after insert or update product
CREATE TRIGGER update_product_fts
AFTER INSERT OR UPDATE
OF "product_name", "category_id", "description"
ON "product"
FOR EACH ROW 
EXECUTE PROCEDURE update_product_fts_column();

--- Update product FTS data after insert or update variant
CREATE TRIGGER update_product_variant_fts
AFTER INSERT OR DELETE OR UPDATE
OF "variant_name", "product_id"
ON "product_variant"
FOR EACH ROW 
EXECUTE PROCEDURE update_product_fts_column();

--- Update price of order_variant to match variant price
CREATE TRIGGER insert_order_variant_update_price
AFTER INSERT
ON "order_variant"
FOR EACH ROW
EXECUTE PROCEDURE copy_price_order();

--- Remove variants when delete product
CREATE TRIGGER delete_product
AFTER UPDATE
OF "soft_delete"
ON "product"
FOR EACH ROW
EXECUTE PROCEDURE remove_variant_from_cart();

--- Update voucher current usage
CREATE TRIGGER insert_voucher_user
AFTER INSERT
ON "voucher_user"
FOR EACH ROW
EXECUTE PROCEDURE update_current_usage_voucher();